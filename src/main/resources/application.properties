# Nome da aplicação
spring.application.name=api-java-smart-contracts

# Configurações do servidor
server.port=8081

# Configurações de log
logging.level.root=INFO
logging.level.org.springframework.web=DEBUG
logging.file.name=logs/api-java-smart-contracts.log
logging.level.org.web3j=DEBUG

# Configurações do Ethereum/Web3j
# URL do nó Ethereum ao qual a aplicação se conectará. Use o endereço do Ganache para desenvolvimento local.
ethereum.rpc.url=http://localhost:8545

# Chave privada para interagir com o contrato (usada pelo credentialsContract bean na configuração Web3j)
contract.private-key=0xf351c527a3f9fc597e9b10e81e5d875ace89ef2346c71a6b5e403afd2a0d4d0a
# Comentário: Esta chave privada é usada para assinar transações enviadas pelo contrato Java.
# Em produção, é crucial usar mecanismos mais seguros para gerenciar chaves privadas, como um serviço de gerenciamento de segredos (Vault, AWS KMS, etc.) ou uma carteira de hardware.

# Chave privada alternativa (manutenção para possível uso futuro ou testes específicos)
ethereum.private-key=0xf351c527a3f9fc597e9b10e81e5d875ace89ef2346c71a6b5e403afd2a0d4d0a
# Comentário: Esta chave privada é mantida para cenários de uso alternativos ou testes.
# A chave definida em 'contract.private-key' é a principal para interações contratuais.

# Configurações do contrato inteligente
# Endereço do contrato Voting implantado na blockchain (ex: Ganache).
blockchain.voting.contract-address=0x945414878e73b3535A82b6Df99375151cc556303

# Remoção da configuração do bytecode
contract.bytecode.path=src/main/resources/contract-bytecode.txt
# Comentário: A configuração do 'bytecode.path' não é mais necessária, pois a interação com o contrato é feita principalmente através do ABI (Application Binary Interface),
# que é gerado a partir do código Solidity. O bytecode é usado principalmente para deploy do contrato, que geralmente é feito separadamente.

# Configurações do banco de dados MySQL
# URL de conexão com o banco de dados MySQL.
spring.datasource.url=jdbc:mysql://localhost:3306/dbvoting
spring.datasource.username=root
spring.datasource.password=seguRa1$
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# Configurações do Hibernate (JPA)
spring.jpa.hibernate.ddl-auto=update
# Comentário: Em produção, é altamente recomendável usar 'validate' para verificar se o schema está consistente com as entidades,
# ou utilizar ferramentas de migração de banco de dados (Liquibase, Flyway) para gerenciar as evoluções do schema de forma controlada.
# Exibe as queries SQL geradas pelo Hibernate no console. Útil para desenvolvimento e depuração

# Dialeto específico do MySQL para o Hibernate gerar SQL otimizado.
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect

# Informa ao Spring Data JPA qual plataforma de banco de dados utilizar.
spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect