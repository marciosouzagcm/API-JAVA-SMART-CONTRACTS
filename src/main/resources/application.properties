# Nome da aplicação
spring.application.name=api-java-smart-contracts

# --- Configurações do Servidor ---
server.port=8080

# --- Configurações de Log ---
# Nível de log padrão para toda a aplicação. INFO é bom para ambientes normais.
logging.level.root=INFO
# Nível de log mais detalhado para requisições web do Spring. DEBUG é útil durante o desenvolvimento.
logging.level.org.springframework.web=DEBUG
# Nível de log detalhado para a biblioteca Web3j. DEBUG é essencial para depurar interações com a blockchain.
logging.level.org.web3j=DEBUG
# Define o caminho e nome do arquivo de log.
logging.file.name=logs/api-java-smart-contracts.log


# --- Configurações do Ethereum/Web3j ---
# URL do nó Ethereum ao qual a aplicação se conectará.
# Use o endereço do Ganache para desenvolvimento local (Geth e Parity usam portas diferentes, geralmente 8545).
blockchain.ethereum.node-url=http://localhost:8545

# Chave privada para interagir com o contrato (usada pelo credentialsContract bean na configuração Web3j).
# Esta chave é usada para assinar transações enviadas pelo contrato Java.
# ATENÇÃO: EM PRODUÇÃO, NUNCA COLOQUE CHAVES PRIVADAS DIRETAMENTE AQUI.
# Use um serviço de gerenciamento de segredos (Azure Key Vault, AWS KMS, HashiCorp Vault, Kubernetes Secrets)
# ou variáveis de ambiente seguras.
blockchain.admin.private-key=0xf351c527a3f9fc597e9b10e81e5d875ace89ef2346c71a6b5e403afd2a0d4d0a

# Endereço do contrato Voting implantado na blockchain (ex: Ganache).
blockchain.voting.contract-address=0x14C632Ff8056B76E6395bDA381375798185abe9a


# --- Configurações do Banco de Dados MySQL ---
# URL de conexão com o banco de dados MySQL.
# Adicionado 'allowPublicKeyRetrieval=true' para resolver o erro "Public Key Retrieval is not allowed"
# Adicionado 'useSSL=false' para ambientes de desenvolvimento sem SSL e 'serverTimezone=UTC' para evitar avisos.
spring.datasource.url=jdbc:mysql://localhost:3306/dbvoting?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
spring.datasource.username=root
spring.datasource.password=seguRa1$
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# --- Configurações do Hibernate (JPA) ---
# 'update': Hibernate tentará atualizar o schema do banco de dados para corresponder às suas entidades.
# Útil em desenvolvimento, mas arriscado em produção.
# RECOMENDADO EM PRODUÇÃO: 'validate' (verifica consistência) ou ferramentas de migração (Liquibase/Flyway).
spring.jpa.hibernate.ddl-auto=update

# Exibe as queries SQL geradas pelo Hibernate no console. Útil para desenvolvimento e depuração.
spring.jpa.show-sql=true

# Formata as queries SQL exibidas, tornando-as mais legíveis.
spring.jpa.properties.hibernate.format_sql=true

# O dialeto MySQL agora é inferido automaticamente pelo Hibernate 6+ e não precisa ser especificado.
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect

# Essa propriedade também é redundante com a inferência automática do dialeto Hibernate.
#spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect

# --- Configurações do Tomcat ---
# Mensagem de inicialização do Tomcat (esta é uma propriedade interna do Spring Boot).
# server.tomcat.basedir=target/tomcat

# Esta propriedade é redundante com server.port=8080.
# server.tomcat.port=8080
server.tomcat.uri-encoding=UTF-8